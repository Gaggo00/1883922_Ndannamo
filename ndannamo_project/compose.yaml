
services:

  # Database autenticazione + backend principale
  postgres:
    container_name: 'postgres_main'
    image: 'postgres:17.1'
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - spring_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-chat:
    container_name: 'chat-postgres'
    image: 'postgres:17.1'
    environment:
      POSTGRES_USER: chatuser
      POSTGRES_PASSWORD: chatpass
      POSTGRES_DB: chatdb
    ports:
      - '5433:5432'  # Espone la porta esterna 5433 verso la 5432 interna
    volumes:
      - postgres_chat_data:/var/lib/postgresql/data
    networks:
      - chat_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatuser -d chatdb"]

  # Database cities
  postgres-cities:
    container_name: 'postgres_cities'
    image: 'postgres:17.1'
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - '5434:5432'
    volumes:
      - postgres_cities_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/cities.csv:/docker-entrypoint-initdb.d/cities.csv
    networks:
      - cities_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend autenticazione
  authentication:
    build: authentication
    container_name: authentication
    ports:
      - "8081:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mydatabase
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: mypassword
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth_chat_net
      - spring_net
      - frontend_net

  # Backend principale
  app:
    build: backend
    container_name: backend
    ports:
      - "8080:8080"
      - "5005:5005"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mydatabase
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: mypassword
      INTERNAL_API_KEY: supersecretkeybackend
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring_net
      - frontend_net
      - back_chat

  chat-backend:
    build: ./chat
    container_name: chat
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-chat:5432/chatdb
      SPRING_DATASOURCE_USERNAME: chatuser
      SPRING_DATASOURCE_PASSWORD: chatpass
      SPRING_APPLICATION_NAME: NdannamoChat
      INTERNAL_API_KEY: supersecretkeybackend
    depends_on:
      postgres-chat:
        condition: service_healthy
    networks:
      - auth_chat_net
      - chat_net
      - back_chat

  # Backend cities
  cities:
    build: cities
    container_name: cities
    ports:
      - "8083:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-cities:5432/mydatabase
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: mypassword
    depends_on:
      postgres-cities:
        condition: service_healthy
    networks:
      - cities_net
      - frontend_net

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Evita che node_modules venga sovrascritto dal volume
    environment:
      - CHOKIDAR_USEPOLLING=true  # Utilizza il polling per la rilevazione dei cambiamenti nei file
    networks:
      - frontend_net

networks:
  spring_net:
  cities_net:
  frontend_net:
  chat_net:
  auth_chat_net:
  back_chat:

volumes:
  postgres_data:
  postgres_chat_data:
  postgres_cities_data:
