
services:
  postgres:
    container_name: 'my-postgres'
    image: 'postgres:17.1'
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - spring_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: backend
    container_name: backend
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mydatabase
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: mypassword
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring_net
      - frontend_net

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Evita che node_modules venga sovrascritto dal volume
    environment:
      - CHOKIDAR_USEPOLLING=true  # Utilizza il polling per la rilevazione dei cambiamenti nei file
    networks:
      - frontend_net

networks:
  spring_net:
  frontend_net:

volumes:
  postgres_data: